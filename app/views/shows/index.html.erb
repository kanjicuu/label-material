<div id="demo">
    <p id="subtitle" class="text-center text-info">&nbsp;</p>

    

    <div id="waveform">
        <!-- Here be waveform -->
    </div>

    <div id="wave-timeline"></div>

    <!-- Zoom -->
    <p class="row">
        <div class="col-xs-1">
          <i class="glyphicon glyphicon-zoom-in"></i>
        </div>

        <div class="col-xs-10">
          <input id="slider" type="range" min="1" max="200" value="25" style="width: 100%" />
        </div>

        <div class="col-xs-1">
          <i class="glyphicon glyphicon-zoom-out"></i>
        </div>
    </p>

    <div class="row" style="margin: 30px 0">
        <div class="col-sm-6">
            <ul>
                <li>アドバイスしたい範囲をドラッグして選択。</li>
                <li>選択してできたエリアをタップ。</li>
                <li>細かい範囲の調整、アドバイスの概要を選択、細かいコメントをしよう。</li>
            </ul>
        </div>

        <div class="col-sm-2">
            <button class="btn btn-primary btn-block" data-action="play">
                <span id="play">
                    <i class="glyphicon glyphicon-play"></i>
                    再生
                </span>

                <span id="pause" style="display: none">
                    <i class="glyphicon glyphicon-pause"></i>
                    一時停止
                </span>
            </button>
        </div>

        <div class="col-sm-2">
            <button class="btn btn-info btn-block" data-action="export" title="Export annotations to JSON" id = 'export'>
                <i class="glyphicon glyphicon-file"></i>
                書き出し
            </button>
        </div>

        <div class="col-sm-2">
            <button class="btn btn-info btn-block" '>
                <a href="mailto:sonoligo@gmail.com?subject=SonoLigo DEMO&amp;body=ご協力ありがとうございました。メールにデータを添付して送信をお願い致します。"><i class="glyphicon glyphicon-envelope"></i>メール</a>
            </button>
        </div>
    </div>
</div>

    <!--
     ************************
    ここから編集フォーム -->

    <form role="form" name="edit" style="opacity: 0; transition: opacity 100ms linear; margin: 30px 0;">
        <!-- opacity: 0;で透明化　 -->
        <div class="form-group">
            <label for="start">開始時間</label>
            <input class="form-control" id="start" name="start" />
        </div>

        <div class="form-group">
            <label for="end">終了時間</label>
            <input class="form-control" id="end" name="end" />
        </div>


        <div class="form-group">
            <label class = "control-label" for="label">ラベル</label>
            <div class= "row">
                <div class="radio-inline">
                    <input type="radio" name="advice" id="advice" value="0"  />
                        <label for="advice">その他</label>
                </div>
                <div class="radio-inline">
                    <input type="radio" name="advice" id="advice" value="1"  />
                        <label for="advice">音程が高い</label>
                </div>
                <div class="radio-inline">
                    <input type="radio" name="advice" id="advice" value="2" />
                    <label for="advice">音程が低い</label>
                </div>
                <div class="radio-inline">
                    <input type="radio" name="advice" id="advice" value="3" />
                    <label for="advice">テンポが早い</label>
                </div>
            </div>
        </div>        

        <div class="form-group">
            <label for="note">コメント</label>
            <textarea id="note" class="form-control" rows="3" name="note"></textarea>
        </div>

        <button type="submit" class="btn btn-success btn-block">保存</button>
        <center><i>または</i></center>
        <button type="button" class="btn btn-danger btn-block" data-action="delete-region">削除</button>
    </form>

<script>
    // trivial.js**********************************
    var wavesurfer = window.wavesurfer;

    var GLOBAL_ACTIONS = {
        play: function() {
            wavesurfer.playPause();
        },

        back: function() {
            wavesurfer.skipBackward();
        },

        forth: function() {
            wavesurfer.skipForward();
        },

        'toggle-mute': function() {
            wavesurfer.toggleMute();
        }
    };



    // Bind actions to buttons and keypresses
    document.addEventListener('DOMContentLoaded', function() {
        document.addEventListener('keydown', function(e) {
            var map = {
                32: 'play', // space
                37: 'back', // left
                39: 'forth' // right
            };
            var action = map[e.keyCode];
            if (action in GLOBAL_ACTIONS) {
                if (document == e.target || document.body == e.target) {
                    e.preventDefault();
                }
                GLOBAL_ACTIONS[action](e);
            }
        });

        [].forEach.call(document.querySelectorAll('[data-action]'), function(el) {
            el.addEventListener('click', function(e) {
                var action = e.currentTarget.dataset.action;
                if (action in GLOBAL_ACTIONS) {
                    e.preventDefault();
                    GLOBAL_ACTIONS[action](e);
                }
            });
        });
    });

// **********************************

    /**
     * Create a WaveSurfer instance.
     */
    var wavesurfer;
    var global = [];

    /**
     * Init & load.

     DOMContentLoaded = $(document).ready

     */      
    //console.log('initialize');  
        var wavesurfer = WaveSurfer.create({
            container: '#waveform',
            waveColor: 'black',
            progressColor: '#878787',
            heigth: 400,
            pixelRation: 1,
            scrollParent: true,
            normalize: true,
            minimap: true

            // backend: 'MediaElemnt'
            // pluginsを加えると
            // plugins: [
                // WaveSurfer.regions.create()
            //     WaveSurfer.minimap.create({
            //         height: 30,
            //         waveColor: '#ddd',
            //         progressColor: '#999',
            //         cursorColor: '#999', 
            //     }),
            //     WaveSurfer.timeline.create({
            //         container: '#wave-timeline'
            //     })
            // ]
        }); 

        //音源のロード　public下なら / から始めるよう。
        wavesurfer.load('/girisya.m4a');

        //timelineの表示
        wavesurfer.on('ready', function () {
          var timeline = Object.create(WaveSurfer.Timeline);

          timeline.init({
            wavesurfer: wavesurfer,
            container: '#wave-timeline',
            height: '30'
          });
        });

        // zoom barの表示
        var slider = document.querySelector('#slider');

            slider.oninput = function () {
              var zoomLevel = Number(slider.value);
              wavesurfer.zoom(zoomLevel);
        };

            /* Regions追加している。 */

        wavesurfer.on('ready', function() {
            wavesurfer.enableDragSelection({
                color: randomColor(0.2)

            });

            console.log('add region');

            // if (localStorage.regions) {
            //     loadRegions(JSON.parse(localStorage.regions));
            //     console.log('load localStorage...');
            // } else {
                // loadRegions(
                //     extractRegions(
                //         wavesurfer.backend.getPeaks(512),
                //         wavesurfer.getDuration()
                //     )
                // );
                wavesurfer.util
                    .ajax({
                        responseType: 'json',
                        url: '/annotations.json'
                    })
                    .on('success', function(data) {
                        console.log("before load localStorage.regions", localStorage.regions);
                        loadRegions(data);
                        saveRegions();
                        //console.log(data);
                        global = data;

                        console.log("after load localStorage.regions", localStorage.regions);
                    });
            // }
        });


        /* Toggle play/pause buttons. */
        var playButton = document.querySelector('#play');
        var pauseButton = document.querySelector('#pause');
        wavesurfer.on('play', function() {
            playButton.style.display = 'none';
            pauseButton.style.display = '';
        });
        wavesurfer.on('pause', function() {
            playButton.style.display = '';
            pauseButton.style.display = 'none';
        });



    // regionをclickしたら、annotationを編集する画面が出るようにする。
    wavesurfer.on('region-click', editAnnotation);
    //regionをupdate or removeしたらsaveregions関数が発動。region-updated新しいのが追加されたときかな
    wavesurfer.on('region-updated', saveRegions);
    wavesurfer.on('region-removed', saveRegions);
    /**
     * Edit annotation for a region.
     */
    function editAnnotation(region) {

        console.log('edit annotation');
        // console.log(region);
        //console.log(document.forms.edit.elements);

        var form = document.forms.edit;
        form.style.opacity = 1;//透明にしない？

        console.log('advice value', form.elements.advice.value);
        console.log('region.data.advice', region.data.advice);


        //ここでadvice.valueの値を取得し、ラジオボタンに反映。
        // もっと綺麗な書き方があるはずや。
        if(region.data.advice==null){
            $('[name=advice][value=0]').prop('checked',false);
            $('[name=advice][value=1]').prop('checked',false);
            $('[name=advice][value=2]').prop('checked',false);
            $('[name=advice][value=3]').prop('checked',false);
        }
        if(region.data.advice=="0"){
            $('[name=advice][value=0]').prop('checked',true);
        }
        if(region.data.advice=="1"){
            $('[name=advice][value=1]').prop('checked',true);
        }
        if(region.data.advice=="2"){
            $('[name=advice][value=2]').prop('checked',true);
        }
        if(region.data.advice=="3"){
            $('[name=advice][value=3]').prop('checked',true);
        }


        //0.1秒単位で丸め込んでる？
        // ここはhtmlの各要素の表示されるためか。
        (form.elements.start.value = Math.round(region.start * 10) / 10 ),
        (form.elements.end.value = Math.round(region.end * 10) / 10);
        //トオヤマカンジform.elements.advice.value = region.advice;    
        form.elements.note.value = region.data.note || '';

        console.log('save form element',form.elements);
        console.log(form.elements.advice.value);

        form.onsubmit = function(e) {
            e.preventDefault();
            //regionのもつデータがstart end dataらしいんだけど、これってどこに入ってる・
            //label: form.elements.label.value,を追加
            region.update({
                start: form.elements.start.value,
                end: form.elements.end.value,
                data: {
                    advice: form.elements.advice.value,
                    note: form.elements.note.value
                }
            });
            form.style.opacity = 0;
        };
        form.onreset = function() {
            form.style.opacity = 0;
            form.dataset.region = null;
        };
        form.dataset.region = region.id;
    }



     //ここに label: region.labelを追加
    function saveRegions() {
        console.log('save regions',localStorage.regions);

        localStorage.regions = JSON.stringify(
            Object.keys(wavesurfer.regions.list).map(function(id) {
                var region = wavesurfer.regions.list[id];

                console.log("save", region.data.advice);
                return {
                    start: region.start,
                    end: region.end,
                    //advice: region.advice,
                    //attributes: region.attributes,
                    data: region.data
                };
            })
        );
    }




    /**
     * Random RGBA color. alphaは透明度かな
     */
    function randomColor(alpha) {
        return (
            'rgba(' +
            [
                200,
                0,
                0,
                alpha || 1
            ] +
            ')'
        );
    }

    // function randomColor(alpha) {
    //     return (
    //         'rgba(' +
    //         [
    //             ~~(Math.random() * 255),
    //             ~~(Math.random() * 255),
    //             ~~(Math.random() * 255),
    //             alpha || 1
    //         ] +
    //         ')'
    //     );
    // }

    function setColor(alpha) {
        return (
            'rgba(' +
            [
                ~~(Math.random() * 255),
                ~~(Math.random() * 255),
                ~~(Math.random() * 255),
                alpha || 1
            ] +
            ')'
        );
    }
    /**
     * Display annotation.
     */
    function showNote(region) {
        if (!showNote.el) {
            showNote.el = document.querySelector('#subtitle');
        }
        showNote.el.textContent = region.data.note || '–';
    }

    function loadRegions(regions) {
        console.log('loadregions',regions);//ここではadvice読み込まれてる。
        regions.forEach(function(region) {
            region.color = randomColor(0.2);
            wavesurfer.addRegion(region);
        });
    }

    // $('#export').on('click', function() {
    //     var fs = require('fs');
    //     fs.writeFile('hoge.json', JSON.stringify(localStorage.regions, null, '    '));

    // });

    // export ボタン押したらデータダウンロード
    //名前は　日付-r-id_t-id_s-id.json
    jQuery("#export").click (function ()
        {
        const blob = new Blob([ localStorage.regions ], { "type" : "json" })
        jQuery("<a></a>", {href: window.URL.createObjectURL(blob),
            download: "SLdemo_1.json",
            target: "_blank"})[0].click()
        });


    /**
     * Bind controls.
     */
    window.GLOBAL_ACTIONS['delete-region'] = function() {
        var form = document.forms.edit;
        var regionId = form.dataset.region;
        if (regionId) {
            wavesurfer.regions.list[regionId].remove();
            form.reset();
        }
    };

        
      
</script>
